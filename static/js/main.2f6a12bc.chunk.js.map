{"version":3,"sources":["img/earth-texture-8k.jpg","util.js","meshes/falcon-heavy.js","meshes/earth.js","meshes/iss.js","meshes/equator.js","setup.js","Telemetry.js","ToggleIss.js","Mission.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","GEOSTATIONARY_RADIUS","degToRad","deg","Math","PI","latToPolar","lat","fhMesh","GLTFLoader","load","gltf","scene","children","scale","multiplyScalar","position","setFromSphericalCoords","lookAt","rotation","y","z","add","xhr","error","console","log","texture","THREE","earthTexture","offset","wrapS","earthGeometry","earthMaterial","map","earthMesh","customMaterial","uniforms","c","type","value","glowColor","viewVector","vertexShader","fragmentShader","side","blending","transparent","earthGlowMesh","EARTH_RADIUS","clone","issGeometry","issMaterial","color","issMesh","issPathGeometry","issPathMaterial","issPathMesh","history","socket","socketioClient","transports","on","msg","_ref","_ref2","Object","slicedToArray","latitude","longitude","push","length","cartesianHistory","_ref3","_ref4","points","getPoints","setFromPoints","attributes","needsUpdate","geometry","material","linewidth","dashSize","gapSize","equatorMesh","computeLineDistances","x","OrbitControls","OrbitControlsPackage","camera","window","innerWidth","innerHeight","renderer","antialias","alpha","preserveDrawingBuffer","gammaInput","gammaOutput","setSize","setClearColor","controls","enableDamping","rotateSpeed","autoRotate","autoRotateSpeed","dampingFactor","enablePan","maxDistance","minDistance","enableZoom","addEventListener","event","offCanvas","target","tagName","offVoidSpace","className","split","includes","phi","getAzimuthalAngle","theta","getPolarAngle","delta","deltaY","dist","sqrt","pow","update","aspect","updateProjectionMatrix","document","body","e","preventDefault","ambLight","dirLight","animate","set","subVectors","clear","render","requestAnimationFrame","Telemetry","state","launchDate","Date","componentDidMount","setInterval","_this","forceUpdate","this","timeRemaining","sign","abs","days","floor","concat","hours","toString","padStart","minutes","seconds","react_default","a","createElement","Component","ToggleIss","tracking","toggleIss","remove","setState","_this2","onClick","Mission","missionSelectorOpen","missionName","phases","name","time","elapsedTime","_this$state","selectorOpen","progressWidth","style","width","index","key","phase","left","App","renderContainer","appendChild","domElement","ref","node","src_ToggleIss_0","src_Telemetry_0","src_Mission_0","Boolean","location","hostname","match","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister","vh","documentElement","setProperty"],"mappings":"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","file":"static/js/main.2f6a12bc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/earth-texture-8k.9499217d.jpg\";","export const EARTH_RADIUS = 6371 / 1000\nexport const GEOSTATIONARY_RADIUS = 42164 / 1000\nexport const ISS_ORBIT_RADIUS = EARTH_RADIUS + 408 / 1000\n\nexport function degToRad(deg) {\n  return (deg / 180) * Math.PI\n}\n\nexport function latToPolar(lat) {\n  return 90 - lat\n}\n","import GLTFLoader from 'three-gltf-loader'\nimport { degToRad, latToPolar, EARTH_RADIUS } from '../util'\n\nimport { scene } from '../setup'\n\n// Falcon Heavy\nconst loader = new GLTFLoader()\n\nexport let fhMesh\nloader.load(\n  'falcon-heavy.glb',\n\n  function(gltf) {\n    fhMesh = gltf.scene.children[0]\n    fhMesh.scale.multiplyScalar(0.01)\n    fhMesh.position.setFromSphericalCoords(\n      EARTH_RADIUS + 118 / 1000,\n      degToRad(latToPolar(28.608397)),\n      degToRad(-80.604345)\n    )\n\n    fhMesh.lookAt(0, 0, 0)\n    fhMesh.rotation.y += Math.PI\n    fhMesh.rotation.z += 1.72 * Math.PI\n\n    // fhMesh.position.x -= 1\n\n    // TODO - increase brightness of FH model\n    // clues as to how: https://github.com/mrdoob/three.js/issues/12554\n    // these work, but leave the earth looking washed out:\n    // renderer.gammaFactor = 2.2\n    // renderer.gammaOutput = true\n    scene.add(fhMesh)\n  },\n  function(xhr) {\n    // console.log((xhr.loaded / xhr.total) * 100 + '% loaded')\n  },\n  function(error) {\n    console.log('An error happened')\n  }\n)\n","import * as THREE from 'three'\nimport earthTexture from '../img/earth-texture-8k.jpg'\nimport { EARTH_RADIUS } from '../util'\n\n// Earth\nconst texture = new THREE.TextureLoader().load(earthTexture)\ntexture.offset = new THREE.Vector2(0.25, 0)\ntexture.wrapS = THREE.RepeatWrapping\nconst earthGeometry = new THREE.SphereGeometry(EARTH_RADIUS, 64, 64)\nconst earthMaterial = new THREE.MeshPhongMaterial({\n  map: texture\n})\nexport const earthMesh = new THREE.Mesh(earthGeometry, earthMaterial)\n\n// Earth glow - derived from http://stemkoski.github.io/Three.js/Shader-Glow.html\nconst customMaterial = new THREE.ShaderMaterial({\n  uniforms: {\n    c: { type: 'f', value: 0.4 },\n    p: { type: 'f', value: 6 },\n    glowColor: { type: 'c', value: new THREE.Color(0xd4ffed) },\n    viewVector: { type: 'v3', value: 0 }\n  },\n  vertexShader: `\n        uniform vec3 viewVector;\n        uniform float c;\n        uniform float p;\n        varying float intensity;\n        void main()\n        {\n          vec3 vNormal = normalize( normalMatrix * normal );\n          vec3 vNormel = normalize( normalMatrix * viewVector );\n          intensity = pow( c - dot(vNormal, vNormel), p );\n\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`,\n  fragmentShader: `\n        uniform vec3 glowColor;\n        varying float intensity;\n        void main()\n        {\n          vec3 glow = glowColor * intensity;\n          gl_FragColor = vec4( glow, 1.0 );\n        }`,\n  side: THREE.BackSide,\n  blending: THREE.AdditiveBlending,\n  transparent: true\n})\nexport const earthGlowMesh = new THREE.Mesh(\n  new THREE.SphereGeometry(EARTH_RADIUS * 1.2, 64, 64),\n  customMaterial.clone()\n)\n","import * as THREE from 'three'\nimport { degToRad, latToPolar, ISS_ORBIT_RADIUS } from '../util'\nimport socketioClient from 'socket.io-client'\n\nconst issGeometry = new THREE.BoxGeometry(0.04, 0.15, 0.04)\nconst issMaterial = new THREE.MeshPhongMaterial({ color: 0x000000 })\nexport const issMesh = new THREE.Mesh(issGeometry, issMaterial)\n\nconst issPathGeometry = new THREE.BufferGeometry()\nconst issPathMaterial = new THREE.LineBasicMaterial({ color: 0xff0000 })\nexport const issPathMesh = new THREE.Line(issPathGeometry, issPathMaterial)\n\nlet history = []\n\nconst socket = socketioClient('wss://spacexapi-spacexapi-8000--pastudan.kubesail.io', {\n  transports: ['websocket']\n})\n\nsocket.on('history', msg => (history = msg))\nsocket.on('update', ([latitude, longitude]) => {\n  history.push([latitude, longitude])\n\n  issMesh.position.setFromSphericalCoords(\n    ISS_ORBIT_RADIUS,\n    degToRad(latToPolar(latitude)),\n    degToRad(longitude)\n  )\n\n  if (history.length >= 2) {\n    const cartesianHistory = history.map(([latitude, longitude]) =>\n      new THREE.Vector3().setFromSphericalCoords(\n        ISS_ORBIT_RADIUS,\n        degToRad(latToPolar(latitude)),\n        degToRad(longitude)\n      )\n    )\n\n    const curve = new THREE.CatmullRomCurve3(cartesianHistory)\n    const points = curve.getPoints(500)\n    issPathGeometry.setFromPoints(points)\n    issPathGeometry.attributes.position.needsUpdate = true\n    issMesh.lookAt(0, 0, 0)\n  }\n})\n\n// TODO load full 3D Model below, but lower vertex count - performance is terrible with current model\n// let issMesh\n// loader.load(\n//   '/iss.glb',\n\n//   function(gltf) {\n//     issMesh = gltf.scene.children[0]\n//     issMesh.scale.multiplyScalar(0.0005)\n//     issMesh.position.setFromSphericalCoords(\n//       EARTH_RADIUS + 118 / 1000,\n//       degToRad(latToPolar(28.608397)),\n//       degToRad(-80.604345)\n//     )\n//     // issMesh.lookAt(new THREE.Vector3(0, 0, 0))\n//     scene.add(issMesh)\n\n//     function updateIss() {\n//       window\n//         .fetch('http://api.open-notify.org/iss-now.json')\n//         .then(res => res.json())\n//         .then(({ iss_position: { latitude, longitude } }) =>\n//           issMesh.position.setFromSphericalCoords(\n//             ISS_RADIUS,\n//             degToRad(latToPolar(latitude)),\n//             degToRad(longitude)\n//           )\n//         )\n//     }\n//     updateIss()\n//     window.setInterval(updateIss, 5000)\n\n//     // gltf.animations // Array<THREE.AnimationClip>\n//     // gltf.scene // THREE.Scene\n//     // gltf.scenes // Array<THREE.Scene>\n//     // gltf.cameras // Array<THREE.Camera>\n//     // gltf.asset // Object\n//   },\n//   function(xhr) {\n//     console.log((xhr.loaded / xhr.total) * 100 + '% loaded')\n//   },\n//   function(error) {\n//     console.log('An error happened')\n//   }\n// )\n","import * as THREE from 'three'\nimport { EARTH_RADIUS } from '../util'\n\n// Equator\nconst curve = new THREE.EllipseCurve(\n  0, // aX\n  0, // aY\n  EARTH_RADIUS + 0.0001, // xRadius\n  EARTH_RADIUS + 0.0001, // yRadius\n  0, // aStartAngle,\n  2 * Math.PI, // aEndAngle\n  false, // aClockwise\n  Math.PI / 2 // aRotation\n)\nconst points = curve.getPoints(200)\nconst geometry = new THREE.BufferGeometry().setFromPoints(points)\nconst material = new THREE.LineDashedMaterial({\n  color: 0xff4444,\n  linewidth: 3,\n  scale: 1,\n  dashSize: 0.1,\n  gapSize: 0.07\n})\nexport const equatorMesh = new THREE.Line(geometry, material)\nequatorMesh.computeLineDistances()\nequatorMesh.rotation.x += Math.PI / 2\n","import * as THREE from 'three'\nimport OrbitControlsPackage from 'three-orbit-controls'\nimport { degToRad, latToPolar, GEOSTATIONARY_RADIUS } from './util'\n\nimport { fhMesh } from './meshes/falcon-heavy'\nimport { earthMesh, earthGlowMesh } from './meshes/earth'\nimport { issMesh, issPathMesh } from './meshes/iss'\nimport { equatorMesh } from './meshes/equator'\n\n// Setup\nconst OrbitControls = OrbitControlsPackage(THREE)\nexport const scene = new THREE.Scene()\nexport const camera = new THREE.PerspectiveCamera(\n  20, // FOV\n  window.innerWidth / window.innerHeight, // Aspect Ratio\n  0.1, // Near Field\n  500000 // Far Field\n)\n\ncamera.position.setFromSphericalCoords(GEOSTATIONARY_RADIUS, degToRad(latToPolar(0)), degToRad(0))\n\nexport const renderer = new THREE.WebGLRenderer({\n  antialias: true,\n  alpha: true,\n  preserveDrawingBuffer: true\n})\nrenderer.gammaInput = true\nrenderer.gammaOutput = true\nrenderer.setSize(window.innerWidth * 2, window.innerHeight * 2)\n\nrenderer.setClearColor(0x99c3e2)\nexport const controls = new OrbitControls(camera)\ncontrols.enableDamping = true\ncontrols.rotateSpeed = 0.4\ncontrols.autoRotate = true\ncontrols.autoRotateSpeed = 0.0025\ncontrols.dampingFactor = 0.05\ncontrols.enablePan = false\ncontrols.maxDistance = GEOSTATIONARY_RADIUS * 2\ncontrols.minDistance = GEOSTATIONARY_RADIUS / 2\ncontrols.enableZoom = false\nwindow.addEventListener('mousedown', () => (controls.dampingFactor = 0.35))\nwindow.addEventListener('mouseup', () => (controls.dampingFactor = 0.05))\nwindow.addEventListener('wheel', function(event) {\n  const offCanvas = event.target.tagName !== 'CANVAS'\n  const offVoidSpace = !event.target.className.split(' ').includes('Mission')\n  if (offCanvas && offVoidSpace) {\n    return\n  }\n\n  const phi = controls.getAzimuthalAngle()\n  const theta = controls.getPolarAngle()\n\n  const delta = event.deltaY\n  const dist = Math.sqrt(camera.position.x ** 2 + camera.position.y ** 2 + camera.position.z ** 2)\n  camera.position.setFromSphericalCoords(dist + delta / 10, theta, phi)\n  controls.update()\n})\n\n// For fixing aspect ratio after resizing\nfunction resizeCanvas() {\n  renderer.setSize(window.innerWidth * 2, window.innerHeight * 2)\n  camera.aspect = window.innerWidth / window.innerHeight\n  camera.updateProjectionMatrix()\n}\nwindow.addEventListener('resize', resizeCanvas, false)\n\n// For removing iOS Safari \"rubber-banding\"\ndocument.body.addEventListener('touchmove', function(e) {\n  e.preventDefault()\n})\n\n// Lighting\nconst ambLight = new THREE.AmbientLight(0xaaaaaa)\n// const ambLight = new THREE.AmbientLight(0x454545)\nscene.add(ambLight)\nconst dirLight = new THREE.DirectionalLight(0xffffff, 1)\nscene.add(dirLight)\n\n// Add meshes\nscene.add(earthMesh)\nscene.add(earthGlowMesh)\nscene.add(issMesh)\nscene.add(issPathMesh)\nscene.add(equatorMesh)\n\nfunction animate() {\n  controls.update()\n  const phi = controls.getAzimuthalAngle()\n  const theta = controls.getPolarAngle()\n\n  if (fhMesh) {\n    const dist = Math.sqrt(camera.position.x ** 2 + camera.position.y ** 2 + camera.position.z ** 2)\n    const scale = dist ** 0.9 / (controls.maxDistance - controls.minDistance) / 60\n    fhMesh.scale.set(scale, scale, scale)\n  }\n\n  dirLight.position.setFromSphericalCoords(GEOSTATIONARY_RADIUS, theta - 0.5, phi - 0.5)\n  earthGlowMesh.material.uniforms.viewVector.value = new THREE.Vector3().subVectors(\n    camera.position,\n    earthGlowMesh.position\n  )\n\n  renderer.clear()\n  renderer.render(scene, camera)\n  requestAnimationFrame(animate)\n}\nanimate()\n","import React, { Component } from 'react'\nimport './Telemetry.css'\n\nclass Telemetry extends Component {\n  state = {\n    launchDate: new Date('2019-01-07T07:53Z') // Iridium 8 - hardcoded for now\n  }\n\n  componentDidMount = () => {\n    window.setInterval(() => this.forceUpdate(), 1000)\n  }\n\n  render() {\n    const { launchDate } = this.state\n\n    let timeRemaining = new Date() - launchDate\n\n    const sign = timeRemaining > 0 ? '+' : '-'\n    timeRemaining = Math.abs(timeRemaining / 1000)\n\n    let days = Math.floor(timeRemaining / 86400)\n    days = days > 0 ? `${days} day${days > 1 ? 's' : ''} ` : ''\n\n    timeRemaining = timeRemaining % 86400\n\n    const hours = Math.floor(timeRemaining / 3600)\n      .toString()\n      .padStart(2, '0')\n    timeRemaining = timeRemaining % 3600\n\n    const minutes = Math.floor(timeRemaining / 60)\n      .toString()\n      .padStart(2, '0')\n    timeRemaining = timeRemaining % 60\n\n    const seconds = Math.floor(timeRemaining)\n      .toString()\n      .padStart(2, '0')\n\n    return (\n      <div className=\"Telemetry\">\n        <div className=\"sign\">\n          <div className=\"skew\">\n            <span>T{sign}</span>\n          </div>\n        </div>\n        <div className=\"time\">\n          {days}\n          {hours}:{minutes}:{seconds}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Telemetry\n","import React, { Component } from 'react'\nimport './ToggleIss.css'\n\nimport { issMesh, issPathMesh } from './meshes/iss'\nimport { scene } from './setup'\n\nclass ToggleIss extends Component {\n  state = {\n    tracking: true\n  }\n\n  toggleIss = () => {\n    const { tracking } = this.state\n\n    if (tracking) {\n      scene.remove(issMesh)\n      scene.remove(issPathMesh)\n    } else {\n      scene.add(issMesh)\n      scene.add(issPathMesh)\n    }\n\n    this.setState({ tracking: !tracking })\n  }\n\n  render() {\n    const { tracking } = this.state\n\n    return (\n      <div className={`ToggleIss ${tracking ? 'tracking' : ''}`} onClick={() => this.toggleIss()}>\n        Track ISS\n      </div>\n    )\n  }\n}\n\nexport default ToggleIss\n","import React, { Component } from 'react'\nimport './Mission.css'\n\nconst missionTime = 240\n\nclass Mission extends Component {\n  state = {\n    missionSelectorOpen: false,\n    missionName: 'Iridium 8',\n    phases: [\n      { name: 'liftoff', time: 0 },\n      { name: 'entry burn', time: 0.3 },\n      { name: 'landing', time: 0.85 },\n      { name: 'deploy', time: 1 }\n    ],\n    elapsedTime: 0\n  }\n\n  componentDidMount = () => {\n    window.setInterval(() => this.setState({ elapsedTime: this.state.elapsedTime + 1 }), 1000)\n  }\n\n  render() {\n    const { missionName, phases, elapsedTime, selectorOpen } = this.state\n\n    const progressWidth = (elapsedTime / missionTime) * 100 + '%'\n\n    return (\n      <div className={`Mission ${selectorOpen ? 'selector-open' : ''}`}>\n        <div className=\"current\" onClick={() => this.setState({ selectorOpen: !selectorOpen })}>\n          <div className=\"change\">change mission</div>\n          <h1>{missionName}</h1>\n          <div className=\"skew\" />\n        </div>\n        <div className=\"selector\">\n          <h2>2017</h2>\n          <ul>\n            <li>\n              <span>Jan 27</span>Iridium 6\n            </li>\n            <li>\n              <span>Mar 6</span>SES-11\n            </li>\n          </ul>\n          <h2>2018</h2>\n          <ul>\n            <li>\n              <span>Feb 8</span>Iridium 8\n            </li>\n            <li>\n              <span>Dec 23</span>GPS III-B\n            </li>\n          </ul>\n          <h2>2019</h2>\n          <ul>\n            <li>\n              <span>Feb 8</span>Iridium 8\n            </li>\n            <li>\n              <span>Feb 8</span>Iridium 8\n            </li>\n            <li>\n              <span>Feb 8</span>Iridium 8\n            </li>\n            <li>\n              <span>Feb 8</span>Iridium 8\n            </li>\n            <li>\n              <span>Feb 8</span>Iridium 8\n            </li>\n            <li className=\"selected\">\n              <span>Feb 8</span>Iridium 8\n            </li>\n            <li>\n              <span>Feb 8</span>Iridium 8\n            </li>\n            <li>\n              <span>Feb 8</span>Iridium 8\n            </li>\n            <li>\n              <span>Feb 8</span>Iridium 8\n            </li>\n            <li>\n              <span>Feb 8</span>Iridium 8\n            </li>\n            <li>\n              <span>Feb 8</span>Iridium 8\n            </li>\n          </ul>\n          <h2>Future</h2>\n          <ul>\n            <li>\n              <span>Feb 8</span>Iridium 8\n            </li>\n            <li>\n              <span>Feb 8</span>Iridium 8\n            </li>\n            <li>\n              <span>Feb 8</span>Iridium 8\n            </li>\n            <li>\n              <span>Feb 8</span>Iridium 8\n            </li>\n            <li>\n              <span>Feb 8</span>Iridium 8\n            </li>\n            <li>\n              <span>Feb 8</span>Iridium 8\n            </li>\n            <li>\n              <span>Feb 8</span>Iridium 8\n            </li>\n            <li>\n              <span>Feb 8</span>Iridium 8\n            </li>\n            <li>\n              <span>Feb 8</span>Iridium 8\n            </li>\n            <li>\n              <span>Feb 8</span>Iridium 8\n            </li>\n            <li>\n              <span>Feb 8</span>Iridium 8\n            </li>\n            <li>\n              <span>Feb 8</span>Iridium 8\n            </li>\n            <li>\n              <span>Feb 8</span>Iridium 8\n            </li>\n            <li>\n              <span>Feb 8</span>Iridium 8\n            </li>\n          </ul>\n        </div>\n        <div className=\"progress\">\n          <div className=\"bar\">\n            <div className=\"bar-complete\" style={{ width: progressWidth }} />\n            <div className=\"phases\">\n              {phases.map(({ name, time }, index) => (\n                <div\n                  key={name}\n                  phase={name}\n                  className={`phase ${index % 2 === 0 ? 'top' : 'bottom'} ${\n                    elapsedTime / missionTime > time ? 'complete' : 'pending'\n                  }`}\n                  style={{ left: `${time * 100}%` }}\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Mission\n","import React, { Component } from 'react'\nimport './App.css'\nimport { renderer } from './setup'\nimport Telemetry from './Telemetry'\nimport ToggleIss from './ToggleIss'\nimport Mission from './Mission'\n\nclass App extends Component {\n  state = {\n    renderer: null\n  }\n\n  componentDidMount() {\n    // mount the canvas\n    this.renderContainer.appendChild(renderer.domElement)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"render-container\" ref={node => (this.renderContainer = node)} />\n        <div className=\"controls\">\n          <ToggleIss />\n          <Telemetry />\n          <Mission />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './reset.css'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n\n// vh hack for mobile safari https://css-tricks.com/the-trick-to-viewport-units-on-mobile/\nlet vh = window.innerHeight * 0.01\ndocument.documentElement.style.setProperty('--vh', `${vh}px`)\n"],"sourceRoot":""}