{"version":3,"sources":["img/earth-texture-8k.jpg","util.js","meshes/falcon-heavy.js","meshes/earth.js","meshes/iss.js","meshes/equator.js","setup.js","Telemetry.js","ToggleIss.js","Mission.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","GEOSTATIONARY_RADIUS","degToRad","deg","Math","PI","latToPolar","lat","fhMesh","GLTFLoader","load","gltf","scene","children","scale","multiplyScalar","position","setFromSphericalCoords","lookAt","rotation","y","z","add","xhr","error","console","log","texture","THREE","earthTexture","offset","wrapS","earthGeometry","earthMaterial","map","earthMesh","customMaterial","uniforms","c","type","value","glowColor","viewVector","vertexShader","fragmentShader","side","blending","transparent","earthGlowMesh","EARTH_RADIUS","clone","issGeometry","issMaterial","color","issMesh","issPathGeometry","issPathMaterial","issPathMesh","history","socket","socketioClient","transports","on","msg","_ref","_ref2","Object","slicedToArray","latitude","longitude","push","length","cartesianHistory","_ref3","_ref4","points","getPoints","setFromPoints","attributes","needsUpdate","geometry","material","linewidth","dashSize","gapSize","equatorMesh","computeLineDistances","x","OrbitControls","OrbitControlsPackage","camera","window","innerWidth","innerHeight","renderer","antialias","alpha","preserveDrawingBuffer","gammaInput","gammaOutput","setSize","setClearColor","controls","enableDamping","rotateSpeed","autoRotate","autoRotateSpeed","dampingFactor","enablePan","maxDistance","minDistance","addEventListener","aspect","updateProjectionMatrix","document","body","e","preventDefault","ambLight","dirLight","animate","update","phi","getAzimuthalAngle","theta","getPolarAngle","dist","sqrt","pow","set","subVectors","clear","render","requestAnimationFrame","Telemetry","state","launchDate","Date","componentDidMount","setInterval","_this","forceUpdate","this","timeRemaining","sign","abs","days","floor","concat","hours","toString","padStart","minutes","seconds","react_default","a","createElement","className","Component","ToggleIss","tracking","toggleIss","remove","setState","_this2","onClick","Mission","missionName","phases","name","time","elapsedTime","_this$state","progressWidth","style","width","index","left","App","renderContainer","appendChild","domElement","ref","node","src_ToggleIss_0","src_Telemetry_0","src_Mission_0","Boolean","location","hostname","match","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister","vh","documentElement","setProperty"],"mappings":"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","file":"static/js/main.9a5dfaa8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/earth-texture-8k.9499217d.jpg\";","export const EARTH_RADIUS = 6371 / 1000\nexport const GEOSTATIONARY_RADIUS = 42164 / 1000\nexport const ISS_ORBIT_RADIUS = EARTH_RADIUS + 408 / 1000\n\nexport function degToRad(deg) {\n  return (deg / 180) * Math.PI\n}\n\nexport function latToPolar(lat) {\n  return 90 - lat\n}\n","import GLTFLoader from 'three-gltf-loader'\nimport { degToRad, latToPolar, EARTH_RADIUS } from '../util'\n\nimport { scene } from '../setup'\n\n// Falcon Heavy\nconst loader = new GLTFLoader()\n\nexport let fhMesh\nloader.load(\n  'falcon-heavy.glb',\n\n  function(gltf) {\n    fhMesh = gltf.scene.children[0]\n    fhMesh.scale.multiplyScalar(0.01)\n    fhMesh.position.setFromSphericalCoords(\n      EARTH_RADIUS + 118 / 1000,\n      degToRad(latToPolar(28.608397)),\n      degToRad(-80.604345)\n    )\n\n    fhMesh.lookAt(0, 0, 0)\n    fhMesh.rotation.y += Math.PI\n    fhMesh.rotation.z += 1.72 * Math.PI\n\n    // fhMesh.position.x -= 1\n\n    // TODO - increase brightness of FH model\n    // clues as to how: https://github.com/mrdoob/three.js/issues/12554\n    // these work, but leave the earth looking washed out:\n    // renderer.gammaFactor = 2.2\n    // renderer.gammaOutput = true\n    scene.add(fhMesh)\n  },\n  function(xhr) {\n    // console.log((xhr.loaded / xhr.total) * 100 + '% loaded')\n  },\n  function(error) {\n    console.log('An error happened')\n  }\n)\n","import * as THREE from 'three'\nimport earthTexture from '../img/earth-texture-8k.jpg'\nimport { EARTH_RADIUS } from '../util'\n\n// Earth\nconst texture = new THREE.TextureLoader().load(earthTexture)\ntexture.offset = new THREE.Vector2(0.25, 0)\ntexture.wrapS = THREE.RepeatWrapping\nconst earthGeometry = new THREE.SphereGeometry(EARTH_RADIUS, 64, 64)\nconst earthMaterial = new THREE.MeshPhongMaterial({\n  map: texture\n})\nexport const earthMesh = new THREE.Mesh(earthGeometry, earthMaterial)\n\n// Earth glow - derived from http://stemkoski.github.io/Three.js/Shader-Glow.html\nconst customMaterial = new THREE.ShaderMaterial({\n  uniforms: {\n    c: { type: 'f', value: 0.4 },\n    p: { type: 'f', value: 6 },\n    glowColor: { type: 'c', value: new THREE.Color(0xd4ffed) },\n    viewVector: { type: 'v3', value: 0 }\n  },\n  vertexShader: `\n        uniform vec3 viewVector;\n        uniform float c;\n        uniform float p;\n        varying float intensity;\n        void main()\n        {\n          vec3 vNormal = normalize( normalMatrix * normal );\n          vec3 vNormel = normalize( normalMatrix * viewVector );\n          intensity = pow( c - dot(vNormal, vNormel), p );\n\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`,\n  fragmentShader: `\n        uniform vec3 glowColor;\n        varying float intensity;\n        void main()\n        {\n          vec3 glow = glowColor * intensity;\n          gl_FragColor = vec4( glow, 1.0 );\n        }`,\n  side: THREE.BackSide,\n  blending: THREE.AdditiveBlending,\n  transparent: true\n})\nexport const earthGlowMesh = new THREE.Mesh(\n  new THREE.SphereGeometry(EARTH_RADIUS * 1.2, 64, 64),\n  customMaterial.clone()\n)\n","import * as THREE from 'three'\nimport { degToRad, latToPolar, ISS_ORBIT_RADIUS } from '../util'\nimport socketioClient from 'socket.io-client'\n\nconst issGeometry = new THREE.BoxGeometry(0.04, 0.15, 0.04)\nconst issMaterial = new THREE.MeshPhongMaterial({ color: 0x000000 })\nexport const issMesh = new THREE.Mesh(issGeometry, issMaterial)\n\nconst issPathGeometry = new THREE.BufferGeometry()\nconst issPathMaterial = new THREE.LineBasicMaterial({ color: 0xff0000 })\nexport const issPathMesh = new THREE.Line(issPathGeometry, issPathMaterial)\n\nlet history = []\n\nconst socket = socketioClient('wss://spacexapi-spacexapi-8000--pastudan.kubesail.io', {\n  transports: ['websocket']\n})\n\nsocket.on('history', msg => (history = msg))\nsocket.on('update', ([latitude, longitude]) => {\n  history.push([latitude, longitude])\n\n  issMesh.position.setFromSphericalCoords(\n    ISS_ORBIT_RADIUS,\n    degToRad(latToPolar(latitude)),\n    degToRad(longitude)\n  )\n\n  if (history.length >= 2) {\n    const cartesianHistory = history.map(([latitude, longitude]) =>\n      new THREE.Vector3().setFromSphericalCoords(\n        ISS_ORBIT_RADIUS,\n        degToRad(latToPolar(latitude)),\n        degToRad(longitude)\n      )\n    )\n\n    const curve = new THREE.CatmullRomCurve3(cartesianHistory)\n    const points = curve.getPoints(500)\n    issPathGeometry.setFromPoints(points)\n    issPathGeometry.attributes.position.needsUpdate = true\n    issMesh.lookAt(0, 0, 0)\n  }\n})\n\n// TODO load full 3D Model below, but lower vertex count - performance is terrible with current model\n// let issMesh\n// loader.load(\n//   '/iss.glb',\n\n//   function(gltf) {\n//     issMesh = gltf.scene.children[0]\n//     issMesh.scale.multiplyScalar(0.0005)\n//     issMesh.position.setFromSphericalCoords(\n//       EARTH_RADIUS + 118 / 1000,\n//       degToRad(latToPolar(28.608397)),\n//       degToRad(-80.604345)\n//     )\n//     // issMesh.lookAt(new THREE.Vector3(0, 0, 0))\n//     scene.add(issMesh)\n\n//     function updateIss() {\n//       window\n//         .fetch('http://api.open-notify.org/iss-now.json')\n//         .then(res => res.json())\n//         .then(({ iss_position: { latitude, longitude } }) =>\n//           issMesh.position.setFromSphericalCoords(\n//             ISS_RADIUS,\n//             degToRad(latToPolar(latitude)),\n//             degToRad(longitude)\n//           )\n//         )\n//     }\n//     updateIss()\n//     window.setInterval(updateIss, 5000)\n\n//     // gltf.animations // Array<THREE.AnimationClip>\n//     // gltf.scene // THREE.Scene\n//     // gltf.scenes // Array<THREE.Scene>\n//     // gltf.cameras // Array<THREE.Camera>\n//     // gltf.asset // Object\n//   },\n//   function(xhr) {\n//     console.log((xhr.loaded / xhr.total) * 100 + '% loaded')\n//   },\n//   function(error) {\n//     console.log('An error happened')\n//   }\n// )\n","import * as THREE from 'three'\nimport { EARTH_RADIUS } from '../util'\n\n// Equator\nconst curve = new THREE.EllipseCurve(\n  0, // aX\n  0, // aY\n  EARTH_RADIUS + 0.0001, // xRadius\n  EARTH_RADIUS + 0.0001, // yRadius\n  0, // aStartAngle,\n  2 * Math.PI, // aEndAngle\n  false, // aClockwise\n  Math.PI / 2 // aRotation\n)\nconst points = curve.getPoints(200)\nconst geometry = new THREE.BufferGeometry().setFromPoints(points)\nconst material = new THREE.LineDashedMaterial({\n  color: 0xff4444,\n  linewidth: 3,\n  scale: 1,\n  dashSize: 0.1,\n  gapSize: 0.07\n})\nexport const equatorMesh = new THREE.Line(geometry, material)\nequatorMesh.computeLineDistances()\nequatorMesh.rotation.x += Math.PI / 2\n","import * as THREE from 'three'\nimport OrbitControlsPackage from 'three-orbit-controls'\nimport { degToRad, latToPolar, GEOSTATIONARY_RADIUS } from './util'\n\nimport { fhMesh } from './meshes/falcon-heavy'\nimport { earthMesh, earthGlowMesh } from './meshes/earth'\nimport { issMesh, issPathMesh } from './meshes/iss'\nimport { equatorMesh } from './meshes/equator'\n\n// Setup\nconst OrbitControls = OrbitControlsPackage(THREE)\nexport const scene = new THREE.Scene()\nexport const camera = new THREE.PerspectiveCamera(\n  20, // FOV\n  window.innerWidth / window.innerHeight, // Aspect Ratio\n  0.1, // Near Field\n  500000 // Far Field\n)\n\ncamera.position.setFromSphericalCoords(GEOSTATIONARY_RADIUS, degToRad(latToPolar(0)), degToRad(0))\n\nexport const renderer = new THREE.WebGLRenderer({\n  antialias: true,\n  alpha: true,\n  preserveDrawingBuffer: true\n})\nrenderer.gammaInput = true\nrenderer.gammaOutput = true\nrenderer.setSize(window.innerWidth * 2, window.innerHeight * 2)\n\nrenderer.setClearColor(0x99c3e2)\nexport const controls = new OrbitControls(camera)\ncontrols.enableDamping = true\ncontrols.rotateSpeed = 0.4\ncontrols.autoRotate = true\ncontrols.autoRotateSpeed = 0.025\ncontrols.dampingFactor = 0.35\ncontrols.enablePan = false\ncontrols.maxDistance = GEOSTATIONARY_RADIUS * 2\ncontrols.minDistance = GEOSTATIONARY_RADIUS / 2\n\n// For fixing aspect ratio after resizing\nfunction resizeCanvas() {\n  renderer.setSize(window.innerWidth * 2, window.innerHeight * 2)\n  camera.aspect = window.innerWidth / window.innerHeight\n  camera.updateProjectionMatrix()\n}\nwindow.addEventListener('resize', resizeCanvas, false)\n\n// For removing iOS Safari \"rubber-banding\"\ndocument.body.addEventListener('touchmove', function(e) {\n  e.preventDefault()\n})\n\n// Lighting\nconst ambLight = new THREE.AmbientLight(0xaaaaaa)\n// const ambLight = new THREE.AmbientLight(0x454545)\nscene.add(ambLight)\nconst dirLight = new THREE.DirectionalLight(0xffffff, 1)\nscene.add(dirLight)\n\n// Add meshes\nscene.add(earthMesh)\nscene.add(earthGlowMesh)\nscene.add(issMesh)\nscene.add(issPathMesh)\nscene.add(equatorMesh)\n\nfunction animate() {\n  controls.update()\n  const phi = controls.getAzimuthalAngle()\n  const theta = controls.getPolarAngle()\n\n  if (fhMesh) {\n    const dist = Math.sqrt(camera.position.x ** 2 + camera.position.y ** 2 + camera.position.z ** 2)\n\n    const scale = dist ** 0.9 / (controls.maxDistance - controls.minDistance) / 60\n    fhMesh.scale.set(scale, scale, scale)\n  }\n\n  dirLight.position.setFromSphericalCoords(GEOSTATIONARY_RADIUS, theta - 0.5, phi - 0.5)\n  earthGlowMesh.material.uniforms.viewVector.value = new THREE.Vector3().subVectors(\n    camera.position,\n    earthGlowMesh.position\n  )\n\n  renderer.clear()\n  renderer.render(scene, camera)\n  requestAnimationFrame(animate)\n}\nanimate()\n","import React, { Component } from 'react'\r\nimport './Telemetry.css'\r\n\r\nclass Telemetry extends Component {\r\n  state = {\r\n    launchDate: new Date('2019-01-07T07:53Z') // Iridium 8 - hardcoded for now\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    window.setInterval(() => this.forceUpdate(), 1000)\r\n  }\r\n\r\n  render() {\r\n    const { launchDate } = this.state\r\n\r\n    let timeRemaining = new Date() - launchDate\r\n\r\n    const sign = timeRemaining > 0 ? '+' : '-'\r\n    timeRemaining = Math.abs(timeRemaining / 1000)\r\n\r\n    let days = Math.floor(timeRemaining / 86400)\r\n    days = days > 0 ? `${days} day${days > 1 ? 's' : ''} ` : ''\r\n\r\n    timeRemaining = timeRemaining % 86400\r\n\r\n    const hours = Math.floor(timeRemaining / 3600)\r\n      .toString()\r\n      .padStart(2, '0')\r\n    timeRemaining = timeRemaining % 3600\r\n\r\n    const minutes = Math.floor(timeRemaining / 60)\r\n      .toString()\r\n      .padStart(2, '0')\r\n    timeRemaining = timeRemaining % 60\r\n\r\n    const seconds = Math.floor(timeRemaining)\r\n      .toString()\r\n      .padStart(2, '0')\r\n\r\n    return (\r\n      <div className=\"Telemetry\">\r\n        <div className=\"sign\">\r\n          <div className=\"skew\">\r\n            <span>T{sign}</span>\r\n          </div>\r\n        </div>\r\n        <div className=\"time\">\r\n          {days}\r\n          {hours}:{minutes}:{seconds}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Telemetry\r\n","import React, { Component } from 'react'\r\nimport './ToggleIss.css'\r\n\r\nimport { issMesh, issPathMesh } from './meshes/iss'\r\nimport { scene } from './setup'\r\n\r\nclass ToggleIss extends Component {\r\n  state = {\r\n    tracking: true\r\n  }\r\n\r\n  toggleIss = () => {\r\n    const { tracking } = this.state\r\n\r\n    if (tracking) {\r\n      scene.remove(issMesh)\r\n      scene.remove(issPathMesh)\r\n    } else {\r\n      scene.add(issMesh)\r\n      scene.add(issPathMesh)\r\n    }\r\n\r\n    this.setState({ tracking: !tracking })\r\n  }\r\n\r\n  render() {\r\n    const { tracking } = this.state\r\n\r\n    return (\r\n      <div className={`ToggleIss ${tracking ? 'tracking' : ''}`} onClick={() => this.toggleIss()}>\r\n        Track ISS\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ToggleIss\r\n","import React, { Component } from 'react'\r\nimport './Mission.css'\r\n\r\nconst missionTime = 240\r\n\r\nclass Mission extends Component {\r\n  state = {\r\n    missionName: 'Iridium 8',\r\n    phases: [{ name: 'foo', time: 0 }, { name: 'bar', time: 0.3 }, { name: 'baz', time: 1 }],\r\n    elapsedTime: 0\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    window.setInterval(() => this.setState({ elapsedTime: this.state.elapsedTime + 1 }), 1000)\r\n  }\r\n\r\n  render() {\r\n    const { missionName, phases, elapsedTime } = this.state\r\n\r\n    const progressWidth = (elapsedTime / missionTime) * 100 + '%'\r\n\r\n    return (\r\n      <div className=\"Mission\">\r\n        <div className=\"name\">\r\n          <h1>{missionName}</h1>\r\n          <div className=\"skew\" />\r\n        </div>\r\n        <div className=\"progress\">\r\n          <div className=\"bar\">\r\n            <div className=\"bar-complete\" style={{ width: progressWidth }} />\r\n            <div className=\"phases\">\r\n              {phases.map(({ name, time }, index) => (\r\n                <div\r\n                  className={`phase ${index % 2 === 0 ? 'top' : 'bottom'}`}\r\n                  style={{ left: time * 100 + '%' }}\r\n                >\r\n                  {name}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Mission\r\n","import React, { Component } from 'react'\r\nimport './App.css'\r\nimport { renderer } from './setup'\r\nimport Telemetry from './Telemetry'\r\nimport ToggleIss from './ToggleIss'\r\nimport Mission from './Mission'\r\n\r\nclass App extends Component {\r\n  state = {\r\n    renderer: null\r\n  }\r\n\r\n  componentDidMount() {\r\n    // mount the canvas\r\n    this.renderContainer.appendChild(renderer.domElement)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"render-container\" ref={node => (this.renderContainer = node)} />\r\n        <div className=\"controls\">\r\n          <ToggleIss />\r\n          <Telemetry />\r\n          <Mission />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './reset.css'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n\r\n// vh hack for mobile safari https://css-tricks.com/the-trick-to-viewport-units-on-mobile/\r\nlet vh = window.innerHeight * 0.01\r\ndocument.documentElement.style.setProperty('--vh', `${vh}px`)\r\n"],"sourceRoot":""}